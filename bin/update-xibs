#!/usr/bin/env ruby

require 'rubygems'
require 'xml'
require 'erb'

PROJECT_DIR = File.expand_path("../../..", __FILE__)
XML.indent_tree_output = true

class LuaClass
  attr :class_name
  attr :superClassName
  attr :outlets
  attr :actions

  def self.all
    lua_files = Dir["#{PROJECT_DIR}/data/**/*.lua"]
    lua_files.map {|f| parse(open(f).read)}.compact
  end
  
  def self.parse(string)
    if string =~ /waxClass[{(\s]+(.*?)[})\s]+$/
      arguments = $1.split(/\s*,\s*/).map {|a| a.sub(/^['"]([^'"]+).*/, "\\1")}
      
      class_name = arguments[0]
      superClassName = arguments[1]
      superClassName = nil if arguments[1] and arguments[1] =~ /=/ # Don't want no protocols!

      return new(class_name, superClassName, string)
    end
    
    return nil
  end
  
  def initialize(class_name, superClassName, contents)
    @class_name = class_name
    @superClassName = superClassName
    @outlets = contents.scan(/IBOutlet\s+[\s"'(]+([^"']+)[\s)"']/).map {|o| o[0]}
    @actions = contents.scan(/function\s+(\w+).*?--\s*IBA/i).map {|o| o[0]}
  end
  
  def to_xml
    @@template ||= DATA.read
    
    xml = ERB.new(@@template, 0, "-").result(binding)
    XML::Parser.string(xml).parse.root
  end
end

# A bunch of helper methods
def xib_files
  xibs = Dir["#{PROJECT_DIR}/**/*.xib"]
  xibs.reject! {|f| f =~ /^#{Regexp.escape PROJECT_DIR}\/wax/} # Don't include any of the xibs in the wax folder
  
  xibs
end

classes_as_xml = LuaClass.all.map {|o| o.to_xml}

for xib_file in xib_files
  doc = XML::Document.file(xib_file)
  class_descriptions = doc.find("//object[@key='referencedPartialClassDescriptions']").first
  class_descriptions.find("object[@class='IBPartialClassDescription']").each {|e| e.remove!}
  classes_as_xml.each {|e| class_descriptions << e.copy(true)}
  doc.save(xib_file, :indent => true)
end


__END__
<object class="IBPartialClassDescription">
    <string key="className"><%= @class_name %></string>
    <string key="superclassName"><%= @superClassName or "NSObject" %></string>
    <object class="NSMutableDictionary" key="outlets">
        <bool key="EncodedWithXMLCoder">YES</bool>
        <object class="NSArray" key="dict.sortedKeys">
            <bool key="EncodedWithXMLCoder">YES</bool>
            <%- for outlet in @outlets -%>
            <string><%= outlet %></string>
            <%- end -%>
        </object>
        <object class="NSMutableArray" key="dict.values">
            <bool key="EncodedWithXMLCoder">YES</bool>
            <%- for outlet in @outlets -%>
            <string>id</string>
            <%- end -%>
        </object>
    </object>
    <object class="NSMutableDictionary" key="actions">
        <bool key="EncodedWithXMLCoder">YES</bool>
        <object class="NSArray" key="dict.sortedKeys">
            <bool key="EncodedWithXMLCoder">YES</bool>
            <%- for action in @actions -%>
            <string><%= action %>:</string>
            <%- end -%>
        </object>
        <object class="NSMutableArray" key="dict.values">
            <bool key="EncodedWithXMLCoder">YES</bool>
            <%- for action in actions -%>
            <string>id</string>
            <%- end -%>
        </object>
    </object>
    <object class="IBClassDescriptionSource" key="sourceIdentifier">
        <string key="majorKey">IBUserSource</string>
        <string key="minorKey"/>
    </object>
</object>
